#tag ClassProtected Class FGScopeBarGroup	#tag Method, Flags = &h21		Private Function CollapsedWidth(IncludeTitle as Boolean = False) As Integer		  // This method returns the width of this group when collapsed (either with or without the title displayed).		  		  if Items = nil or Items.Ubound < 0 then return 0 ' no items, thus no width		  		  dim w as integer		  dim p as new picture(5,5,32) ' dummy picture just to get a graphics object...		  		  // Set graphics parameters		  p.Graphics.TextSize = 12		  p.Graphics.Bold = true		  		  // Title		  if Title <> "" and IncludeTitle then w = w + kItemPadding + p.Graphics.StringWidth(Title)		  		  // Popup menu		  w = w + kItemPadding + PopupWidth()		  		  // Return the answer		  return w		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(Name as String, Mode as Integer, Items() as FGScopeBarItem = nil, Title as String = "")		  // A name and a mode must be passed.  Items() and Title are optional.		  		  me.Name = Name		  me.Mode = Mode		  if Items <> nil then me.Items = Items		  me.Title = Title		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(Name as String, Mode as Integer, Title as String = "")		  // A name and a mode must be passed.  Title is optional.		  		  me.Name = Name		  me.Mode = Mode		  if Items <> nil then me.Items = Items		  me.Title = Title		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function FullWidth() As Integer		  // This method returns the width of this group when fully expanded.		  		  if Items = nil or Items.Ubound < 0 then return 0 ' no items, thus no width		  		  dim w as integer		  dim item as FGScopeBarItem		  dim p as new picture(5,5,32) ' dummy picture just to get a graphics object...		  		  // Set graphics parameters		  p.Graphics.TextSize = 12		  p.Graphics.Bold = true		  		  // Title		  if Title <> "" then w = w + kItemPadding + p.Graphics.StringWidth(Title)		  		  // Add each item		  for each item in Items		    		    w = w + kItemPadding + item.Width		    		  next item		  		  // Return the answer		  return w		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function PopupImage(Hover as Boolean = False) As Picture		  // Internal use only.		  		  // Returns (as a picture) this group's items as a popup menu		  // If Hover = True then the popup is being hovered over.		  		  dim p as Picture		  dim backgroundWidth, textWidth, leftEdgeWidth, rightEdgeWidth as integer		  dim a, numItemsSelected as integer		  dim textColour as Color		  dim text as String		  dim index as integer = -1		  		  p = new Picture(me.PopupWidth, kPopupHeight, 32)		  p.Transparent = Picture.TransparentWhite		  		  p.Graphics.TextSize = 12		  p.Graphics.Bold = true		  		  leftEdgeWidth = fg_sb_popup_left_edge.Width		  rightEdgeWidth = fg_sb_popup_right.Width		  		  if Items.Ubound >= 0 then		    		    // Get the text to display		    for a = 0 to Items.Ubound		      if Items(a).Selected then		        numItemsSelected = numItemsSelected + 1		        text = Items(a).Title		        index = a ' if only one item is selected, this index will be used to grab the item for it's icon later...		      end if		    next a		    if numItemsSelected = 0 then text = "(None)"		    if numItemsSelected > 1 then text = "(Multiple)"		    		  end if		  		  // Text colour		  if numItemsSelected > 0 then		    textColour = kColourTextSelected		  else		    textColour = kColourTitle		  end if		  		  // How wide is the text?		  textWidth = p.Graphics.StringWidth(text)		  		  if numItemsSelected > 0 then		    		    // Left edge		    p.Graphics.DrawPicture(fg_sb_item_left_edge_pressed, 0, 0)		    		    // Fill		    backgroundWidth = p.Graphics.Width - (leftEdgeWidth + rightEdgeWidth)		    p.Graphics.DrawPicture(fg_sb_item_background_pressed, leftEdgeWidth, 0, backgroundWidth, p.Graphics.Height, _		    0, 0, fg_sb_item_background_pressed.Width, fg_sb_item_background_pressed.Height)		    		    // Right edge		    p.Graphics.DrawPicture(fg_sb_popup_right_pressed, p.Graphics.Width - fg_sb_popup_right_pressed.Width, 0)		    		    if numItemsSelected = 1 and index > -1 and Items(index).Icon <> nil then		      // Draw this item's icon		      p.Graphics.DrawPicture(Items(index).Icon, fg_sb_item_left_edge_pressed.Width, (p.Height/2)-(Items(index).Icon.Height/2))		      		      // Now the text		      // Draw the text		      p.Graphics.ForeColor = textColour		      p.Graphics.DrawString(text, Items(index).Icon.Width + kIconRightPadding, kTextBaseline)		    else		      		      // Just draw the text		      p.Graphics.ForeColor = textColour		      p.Graphics.DrawString(text, (p.Width/2)-(textWidth/2), kTextBaseline)		      		    end if		    		    		    		  else		    		    // Left edge		    p.Graphics.DrawPicture(fg_sb_popup_left_edge, 0, 0)		    		    // Fill		    backgroundWidth = p.Graphics.Width - (leftEdgeWidth + rightEdgeWidth)		    p.Graphics.DrawPicture(fg_sb_popup_background, leftEdgeWidth, 0, backgroundWidth, p.Graphics.Height, _		    0, 0, fg_sb_popup_background.Width, fg_sb_popup_background.Height)		    		    // Right edge		    p.Graphics.DrawPicture(fg_sb_popup_right, p.Graphics.Width - fg_sb_popup_right.Width, 0)		    		    // Draw the text		    p.Graphics.ForeColor = textColour		    p.Graphics.DrawString(text, (p.Width/2)-(textWidth/2), kTextBaseline)		    		  end if		  		  // Return the image		  return p		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function PopupWidth() As Integer		  // Internal use only.		  		  // Returns the width of this group's popup menu.		  		  if Items.Ubound < 0 then return 0		  		  dim p as new Picture(5, 5, 32)		  dim a, numItemsSelected as integer		  dim text as string		  dim index as integer = -1		  dim iconWidth as integer = 0		  		  p.Graphics.TextSize = 12		  p.Graphics.Bold = true		  		  // How many items		  for a = 0 to Items.Ubound		    if Items(a).Selected then		      numItemsSelected = numItemsSelected + 1		      text = Items(a).Title		      index = a		    end if		  next a		  if numItemsSelected = 0 then text = "(None)"		  if numItemsSelected > 1 then text = "(Multiple)"		  		  // Do we need to draw an icon?		  if numItemsSelected = 1 and index > -1 and Items(index).Icon <> nil then iconWidth = Items(index).Icon.Width + kItemPadding		  		  return fg_sb_popup_left_edge.Width + p.Graphics.StringWidth(text) + fg_sb_popup_right.Width + iconWidth		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Width(WithState as Integer) As Integer		  // Internal use only.		  		  // Returns the width of this group in the specified state.		  		  if WithState = StateExpanded then return FullWidth		  if WithState = StateCollapsedWithTitle then return CollapsedWidth(true)		  if WithState = StateCollapsed then return CollapsedWidth(false)		  		End Function	#tag EndMethod	#tag Property, Flags = &h0		Items() As FGScopeBarItem	#tag EndProperty	#tag Property, Flags = &h0		Mode As Integer	#tag EndProperty	#tag Property, Flags = &h0		Name As String	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			// The current state of this group:			Expanded			Collapsed with title			Collapsed					#tag EndNote		State As Integer = StateExpanded	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Each group can have an optional title.  This is displayed to the left of the first item.					#tag EndNote		Title As String	#tag EndProperty	#tag Constant, Name = kColourTextSelected, Type = Color, Dynamic = False, Default = \"&cFDFDFD", Scope = Private	#tag EndConstant	#tag Constant, Name = kColourTitle, Type = Color, Dynamic = False, Default = \"&c333333", Scope = Private	#tag EndConstant	#tag Constant, Name = kIconRightPadding, Type = Double, Dynamic = False, Default = \"10", Scope = Public	#tag EndConstant	#tag Constant, Name = kItemPadding, Type = Double, Dynamic = False, Default = \"5", Scope = Private	#tag EndConstant	#tag Constant, Name = kPopupHeight, Type = Double, Dynamic = False, Default = \"20", Scope = Private	#tag EndConstant	#tag Constant, Name = kTextBaseline, Type = Double, Dynamic = False, Default = \"14", Scope = Private	#tag EndConstant	#tag Constant, Name = ModeMultiple, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = ModeRadio, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = StateCollapsed, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = StateCollapsedWithTitle, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = StateExpanded, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = Version, Type = String, Dynamic = False, Default = \"1.0", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Mode"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="State"			Group="Behavior"			InitialValue="StateExpanded"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Title"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass