#tag ClassProtected Class FGScopeBarItem	#tag Method, Flags = &h0		Sub Constructor(Title as String, Tag as Variant = "", Icon as Picture = nil)		  me.Title = Title		  me.Tag = Tag		  me.Icon = Icon		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Image(Hover as Boolean = False) As Picture		  // Internal use only.		  		  // Returns this item as a Picture.		  // If Hover = True then this item is being hovered over.		  		  dim p as Picture		  dim backgroundWidth, titleWidth, edgeWidth as integer		  dim titleColour as Color		  		  p = new Picture(me.Width, kItemHeight, 32)		  p.Transparent = Picture.TransparentWhite		  		  edgeWidth = fg_sb_item_left_edge_pressed.Width		  		  if me.Selected then		    		    titleColour = kColourTitleSelected		    		    p.Graphics.DrawPicture(fg_sb_item_left_edge_pressed, 0, 0) ' left edge		    		    backgroundWidth = p.Graphics.Width - (edgeWidth * 2)		    p.Graphics.DrawPicture(fg_sb_item_background_pressed, edgeWidth, 0, backgroundWidth, p.Graphics.Height, _		    0, 0, fg_sb_item_background_pressed.Width, fg_sb_item_background_pressed.Height) ' fill		    		    p.Graphics.DrawPicture(fg_sb_item_right_edge_pressed, p.Graphics.Width - fg_sb_item_right_edge_pressed.Width, 0) ' right edge		    		  else		    		    if Hover then		      		      titleColour = kColourTitleSelected		      		      p.Graphics.DrawPicture(fg_sb_item_left_edge_hover, 0, 0) ' left edge		      		      backgroundWidth = p.Graphics.Width - (edgeWidth * 2)		      p.Graphics.DrawPicture(fg_sb_item_background_hover, edgeWidth, 0, backgroundWidth, p.Graphics.Height, _		      0, 0, fg_sb_item_background_hover.Width, fg_sb_item_background_hover.Height) ' fill		      		      p.Graphics.DrawPicture(fg_sb_item_right_edge_hover, p.Graphics.Width - fg_sb_item_right_edge_hover.Width, 0) ' right edge		      		    else		      		      titleColour = kColourTitle		      		      // Fill		      p.Graphics.DrawPicture(fg_sb_background, 0, 0, p.Graphics.Width, p.Graphics.Height, 0, 0, fg_sb_background.Width, fg_sb_background.Height)		      		    end if		    		  end if		  		  // Icon		  if Icon <> nil then p.Graphics.DrawPicture(Icon, edgeWidth, (p.Graphics.Height/2)-(icon.Height/2))		  		  // Title		  p.Graphics.TextSize = 12		  p.Graphics.Bold = true		  p.Graphics.ForeColor = titleColour		  titleWidth = p.Graphics.StringWidth(Title)		  		  if Icon <> nil then		    p.Graphics.DrawString(Title, Icon.Width + kPadding, kTitleBaseline)		  else		    p.Graphics.DrawString(Title, (p.Width/2)-(titleWidth/2), kTitleBaseline)		  end if		  		  // Return the image		  return p		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function PopupWidth() As Integer		  // Internal use only.		  		  // This method returns the width of this item when it's in a popup		  // Considers the width of the text, the icon (if present) and the item surrounding.		  		  if Title = "" then return 0 ' must have a title		  		  dim w as integer		  dim p as new picture(5,5,32) ' dummy picture just to get a graphics object...		  		  // Set graphics parameters		  p.Graphics.TextSize = 12		  p.Graphics.Bold = true		  		  // Button edges		  w = w + fg_sb_item_left_edge_pressed.Width + fg_sb_popup_right.Width		  		  // Icon		  if icon <> nil then w = icon.Width + kPadding		  		  // Title		  w = w + p.Graphics.StringWidth(Title)		  		  return w		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Width() As Integer		  // Internal use only.		  		  // This method returns the width of this item.		  // Considers the width of the text, the icon (if present) and the item surrounding.		  		  if Title = "" then return 0 ' must have a title		  		  dim w as integer		  dim p as new picture(5,5,32) ' dummy picture just to get a graphics object...		  		  // Set graphics parameters		  p.Graphics.TextSize = 12		  p.Graphics.Bold = true		  		  // Button edges		  w = w + fg_sb_item_left_edge_pressed.Width + fg_sb_item_right_edge_pressed.Width		  		  // Icon		  if icon <> nil then w = icon.Width + (2 * kPadding)		  		  // Title		  w = w + p.Graphics.StringWidth(Title)		  		  return w		  		End Function	#tag EndMethod	#tag Property, Flags = &h0		Icon As Picture	#tag EndProperty	#tag Property, Flags = &h0		Selected As Boolean = False	#tag EndProperty	#tag Property, Flags = &h0		Tag As Variant	#tag EndProperty	#tag Property, Flags = &h0		Title As String	#tag EndProperty	#tag Constant, Name = kColourTitle, Type = Color, Dynamic = False, Default = \"&c333333", Scope = Private	#tag EndConstant	#tag Constant, Name = kColourTitleSelected, Type = Color, Dynamic = False, Default = \"&cFDFDFD", Scope = Private	#tag EndConstant	#tag Constant, Name = kItemHeight, Type = Double, Dynamic = False, Default = \"20", Scope = Private	#tag EndConstant	#tag Constant, Name = kPadding, Type = Double, Dynamic = False, Default = \"12", Scope = Private	#tag EndConstant	#tag Constant, Name = kTitleBaseline, Type = Double, Dynamic = False, Default = \"14", Scope = Private	#tag EndConstant	#tag Constant, Name = Version, Type = String, Dynamic = False, Default = \"1.0", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Icon"			Group="Behavior"			Type="Picture"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Selected"			Group="Behavior"			InitialValue="False"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Title"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass